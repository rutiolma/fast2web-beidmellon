<?php

/**
 * @file
 * Tests for fedict_beidmellon.module.
 */
class BeidMellonTest extends DrupalWebTestCase {

  /**
   * @var test user object
   */
  protected $testUser = NULL;

  /**
   * @var test role object
   */
  protected $testRole = NULL;

  public static function getInfo() {
    return array(
      'name' => 'Beid Mellon authentication',
      'description' => 'Test Beid Mellon authentication under different configurations.',
      'group' => 'Fedict'
    );
  }

  function setUp() {
    // Use the existing install
    $this->setup = TRUE;

    $role_name = 'beID test role';
    $role = user_role_load_by_name($role_name);

    if (empty($role)) {
      $role = new stdClass();
      $role->name = $role_name;
      $this->testRole = user_role_save($role);
    }
    else {
      $this->testRole = $role;
    }

    // Create sample user
    $test_user = $this->drupalCreateUser();
    $new_user_roles = array(
      DRUPAL_AUTHENTICATED_RID => 'authenticated user',
      $role->rid => TRUE,
    );
    $test_user->field_fedid = 12345678901;
    $test_user->status = 1;
    $test_user->roles = $new_user_roles;
    $this->testUser = user_save($test_user);
    // Create duplicate user with the same fedID
    $test_user2 = $this->drupalCreateUser();

    $this->drupalLogin($this->admin_user);
    $this->drupalGet('admin/config/people/accounts');

    // Set the user's role to be the administrator role.
    $edit = array();
    $edit['field_fedid'] = 12345678901;
    $this->drupalPost('admin/config/people/accounts', $edit, t('Save configuration'));
  }

  function testLoginUser() {
    $editor_rid = $this->testRole->rid;
    user_role_grant_permissions($editor_rid, array('bypass beid authentication'));

    $auth = array(
      'name' => $this->testUser->name,
      'pass' => $this->testUser->pass_raw,
    );

    $this->drupalPost('user/login', $auth, t('Log in'));
    $this->assertLink(t('Log out'), 0, t('User %name successfully logged in.', array('%name' => $account->name)), t('User login'));

    // Attempt to log in with erroneous password.
    $auth_err = array(
      'name' => $this->testUser->name,
      'pass' => $this->testUser->pass_raw . 'not',
    );

    $this->drupalPost('user/login', $auth_err, t('Log in'));
    $this->assertNoLink(t('Log out'), 0, t('User %name successfully refused log in.', array('%name' => $account->name)), t('User login'));

    $edit = array();
    $edit['name'] = $name = $this->randomName();
    $edit['mail'] = $mail = $edit['name'] . '@example.com';
    $edit['pass[pass1]'] = $new_pass = $this->randomName();
    $edit['pass[pass2]'] = $new_pass;
    $this->drupalPost('user/register', $edit, t('Create new account'));
    $accounts = user_load_multiple(array(), array('name' => $name, 'mail' => $mail));
    $new_user = reset($accounts);
    $this->assertText(t('Registration successful. You are now logged in.'), 'Users are logged in after registering.');
    $this->drupalLogout();
    user_delete($new_user->uid);

    user_role_revoke_permissions($editor_rid, array('bypass beid authentication'));
    $this->drupalLogout();
    $this->drupalPost('user/login', $auth, t('Log in'));
    $this->assertNoLink(t('Log out'), 0, t('User %name successfully disallowed login.', array('%name' => $account->name)), t('User login'));
    $_SERVER['MELLON_urn_be_fedict_iam_attr_fedid'] = 12345678901;
    $this->drupalPost('user/login', $auth, t('Log in'));
    $this->assertLink(t('Log out'), 0, t('User %name successfully logged in.', array('%name' => $account->name)), t('User login'));

  }

  function testOneTimeLoginLink() {
    $editor_rid = $this->testRole->rid;
    user_role_grant_permissions($editor_rid, array('bypass beid authentication'));

    $link = user_pass_reset_url($this->testUser . '/login');
    $this->drupalGet($link);
    $this->assertLink(t('Log out'), 0, t('User %name successfully logged in.', array('%name' => $account->name)), t('User login'));

    user_role_revoke_permissions($editor_rid, array('bypass beid authentication'));
    $this->drupalLogout();

    $link = user_pass_reset_url($this->testUser . '/login');
    $this->drupalGet($link);
    $this->assertNoLink(t('Log out'), 0, t('User %name successfully logged in.', array('%name' => $account->name)), t('User login'));
  }

  function testRedirect() {
    //$this->drupalLogout();
    $this->get('/contact');

    $editor_rid = $this->testRole->rid;
    user_role_grant_permissions($editor_rid, array('bypass beid authentication'));
    $this->clickLink('Login using eID');

    $this->assertEqual($this->getUrl, '/contact', t('Redirect after login succesful'));
  }

  function testHash() {
    //add fedid to user thru admin interface
    $fedid = 12435678901;
    $hash = _fedict_fedid_hash($fedid);
    $match = fedict_fedid_match($fedid, $hash);
    $this->assertEqual($match && !empty($match), TRUE, t('Hashing of FedIDs succeeded.'));
  }

  function testLogin() {
    $this->get('/contact');
    $this->assertNoLink(t('Log out'), 0, t('Pages for unauthenticated users are not automatically logged in'));
  }

  function testDuplicateFedID() {
    $this->drupalLogin($this->admin_user);
    $this->drupalGet('admin/config/people/accounts');

    // Set the user's role to be the administrator role.
    $edit = array();
    $edit['user_admin_role'] = $this->rid;
    $this->drupalPost('admin/config/people/accounts', $edit, t('Save configuration'));
  }

  function testLoginRedirect() {
    global $language;
    $lang_name = $language->language ;

    $this->drupalGet('?q=beid/login');
    $this->drupalGet($lang_name . '/beid/login');
    $this->drupalGet($lang_name . '/beid/login', array(
      'query' => array('destination' => 'contact')));
    $this->assertNoLink(t('Log out'), 0, t('Pages for unauthenticated users are not automatically logged in'));
  }

  function tearDown() {
    // Remove sample user
    user_delete($this->testUser->uid);
    user_role_delete($this->testRole->rid);
  }
}

/*
 * try to log in inactive user.
 *
 * TESTS FOR REGISTRATION:
 * - register a user
 * - check
 *
 *
 *check case sensitivity
 *
- create user
- log him in thru: 1) user/login, 2) login block, 3) one time login link, 4) user/register
- make sure user is not logged in with module ON
- make sure user is logged in with module OFF.

- create user WITH right permissions and specific password
- log him in thru 1 2 3
- make sure user IS logged in with module ON.

- test field
- add field

- add exsiting field (ie same name)
- make user
- make sure it's not possible to have 2


try ?q=beid/login
    fr/beid/login
/fr/beid/login?destination=user/login

 - change encryption algorithm and see if finding matching fedid still works

- disable logintoboggan

- mkae sure user with status 0 gets "account is still pending activation" message
 */
